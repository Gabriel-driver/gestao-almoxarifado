/**
 * @OnlyCurrentDoc
 *
 * Um script completo para gerenciar o fluxo de requisições.
 * 1. Sincroniza dados do Supabase.
 * 2. Processa relatórios diários recebidos por e-mail para atualizar as bases de dados.
 * 3. Automatiza ações de baixa e envio para o SharePoint.
 * 4. Gera e envia um relatório de pendências por e-mail.
 * 5. Revalida alertas de itens pendentes dinamicamente.
 */

// =================================================================================
// OBJETO DE CONFIGURAÇÃO GLOBAL
// Edite os valores nesta seção para ajustar o comportamento do script sem alterar o código.
// =================================================================================
const CONFIG = {
  // --- GERAL ---
  ABA_REQUISICOES: "Requisições",
  ABA_COMERCIAL: "Comerciais",
  ABA_ESTOQUE: "Estoque",
  ABA_RESERVAS: "BD_Reservas",
  ABA_ARQUIVO: "Arquivo",
  SITUACAO_PADRAO: "PENDENTE DE BAIXA",
  
  // --- SUPABASE API ---
  SUPABASE_URL: "https://uqcvxbaxedzhicmueigo.supabase.co",
  SUPABASE_KEY: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVxY3Z4YmF4ZWR6aGljbXVlaWdvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAyNjY3ODcsImV4cCI6MjA2NTg0Mjc4N30.EdDHZ4a2RC9VKKTVAgXPqFPI8_0rbSPUu1soNcBVISc",
  NOME_DA_VIEW: "vw_RequisicoesItens",
  TAMANHO_PAGINA: 1000,
  
  // --- SHAREPOINT ---
  ID_PLANILHA_SHAREPOINT: "1S-SnXfjqjWW6bmCixCQsRSPYrGcAFAQSaMpixfO1euo",

  // --- AUTOMAÇÃO DE E-MAIL ---
  EMAIL_REMETENTE: "rosilany.santos@pse.srv.br",
  ASSUNTO_PALAVRAS_CHAVE: ["MB", "DO DIA"], // Array de strings

  // --- RELATÓRIO E ERROS ---
  DESTINATARIOS_RELATORIO: "gabrielribeiro201522@gmail.com", // Separado por vírgulas
  EMAIL_ADMIN_ERROS: "gabrielribeiro201522@gmail.com" // IMPORTANTE: E-mail para receber alertas de erro.
};


// =================================================================================
// FUNÇÕES DE INFRAESTRUTURA (ERROS E FEEDBACK)
// =================================================================================

/**
 * Notifica o administrador por e-mail quando um erro ocorre em uma função principal.
 * @param {string} nomeFuncao O nome da função onde o erro ocorreu.
 * @param {Error} erro O objeto de erro capturado.
 */
function notificarAdminSobreErro(nomeFuncao, erro) {
  try {
    const emailAdmin = CONFIG.EMAIL_ADMIN_ERROS;
    if (!emailAdmin || emailAdmin.includes("exemplo.com")) {
      Logger.log("E-mail do administrador não configurado em CONFIG. Nenhuma notificação de erro será enviada.");
      return;
    }
    const assunto = `[ALERTA DE ERRO] Falha no Script de Requisições`;
    const corpo = `Olá,\n\nOcorreu um erro na automação da planilha de requisições.\n\n` +
                  `Função: ${nomeFuncao}\n` +
                  `Data: ${new Date().toLocaleString("pt-BR")}\n` +
                  `Usuário que executou: ${Session.getActiveUser().getEmail()}\n\n` +
                  `MENSAGEM DO ERRO:\n${erro.toString()}\n\n` +
                  `STACK TRACE (para depuração):\n${erro.stack}`;
    
    GmailApp.sendEmail(emailAdmin, assunto, corpo);
    Logger.log(`E-mail de notificação de erro enviado para ${emailAdmin}.`);
  } catch (e) {
    Logger.log(`!!! FALHA AO ENVIAR NOTIFICAÇÃO DE ERRO: ${e.stack} !!!`);
  }
}

/**
 * Mostra uma mensagem na sidebar da planilha para dar feedback ao usuário.
 * @param {string} titulo O título da sidebar.
 * @param {string} mensagem A mensagem a ser exibida.
 */
function mostrarFeedback(titulo, mensagem) {
    const html = `<p style="font-family: Arial, sans-serif;">${mensagem}</p>`;
    SpreadsheetApp.getUi().showSidebar(HtmlService.createHtmlOutput(html).setTitle(titulo));
}


// =================================================================================
// FUNÇÃO HELPER: LÓGICA DE ALERTAS CENTRALIZADA
// =================================================================================

/**
 * Gera a string de alerta, agora considerando a quantidade já baixada para tornar o alerta dinâmico.
 * @param {string} codigoMaterial O código do material a ser validado.
 * @param {number} qtdEntregue A quantidade total entregue do item.
 * @param {number} qtdBaixada A quantidade já baixada pelo usuário.
 * @param {string} reservaSupabase O número da reserva associada.
 * @param {Map} mapaEstoque O mapa de dados do estoque para consulta rápida.
 * @param {Map} mapaReservas O mapa de dados das reservas para consulta rápida.
 * @returns {string} A string de alerta gerada, combinando todas as validações.
 */
function gerarAlertas(codigoMaterial, qtdEntregue, qtdBaixada, reservaSupabase, mapaEstoque, mapaReservas) {
    const alertas = [];
    const infoEstoque = mapaEstoque.get(codigoMaterial);

    if (!reservaSupabase || !mapaReservas.has(reservaSupabase)) {
        alertas.push("❌ RESERVA NÃO ENCONTRADA NO PLANEJAMENTO");
    } else {
        const mapaMateriais = mapaReservas.get(reservaSupabase);
        const qtdPrevistaNaReserva = mapaMateriais.get(codigoMaterial) || 0;
        
        const qtdExcedente = qtdEntregue - qtdPrevistaNaReserva;

        if (qtdExcedente > 0) {
            const qtdBaixadaDoExcedente = Math.max(0, qtdBaixada - qtdPrevistaNaReserva);
            const qtdParaSubir = qtdExcedente - qtdBaixadaDoExcedente;
            if (qtdParaSubir > 0) {
                const motivo = mapaMateriais.has(codigoMaterial) ? "(saldo reserva insuficiente)" : "(material não previsto)";
                alertas.push(`⚠️ [SHAREPOINT] Subir ${qtdParaSubir.toFixed(2)} unid. ${motivo}`);
            }
        }
    }

    if (!infoEstoque) {
        alertas.push("⚠️ MATERIAL NÃO CADASTRADO NO ESTOQUE");
    } else if (infoEstoque.saldo < qtdEntregue) {
        alertas.push(`⚠️ SALDO INSUFICIENTE (Req: ${qtdEntregue} / Disp: ${infoEstoque.saldo})`);
    }
    
    return alertas.join(' | ');
}


// =================================================================================
// FUNÇÃO 1: SINCRONIZAÇÃO DE ENTREGUES DO SUPABASE
// =================================================================================

function sincronizarDadosSupabase() {
  const NOME_FUNCAO = "sincronizarDadosSupabase";
  try {
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const fusoHorario = "America/Sao_Paulo"; 
    Logger.log(`--- INÍCIO DA ${NOME_FUNCAO} ---`);
    mostrarFeedback("Sincronizando...", "Passo 1/5: Lendo dados locais...");
    
    const estoqueSheet = spreadsheet.getSheetByName(CONFIG.ABA_ESTOQUE);
    if (!estoqueSheet) throw new Error(`A aba '${CONFIG.ABA_ESTOQUE}' não foi encontrada.`);
    const mapaEstoque = new Map(estoqueSheet.getRange("A2:D" + estoqueSheet.getLastRow()).getValues().map(row => [String(row[0]).trim(), { descricao: String(row[1] || '').trim(), und: row[2], saldo: Number(row[3]) || 0 }]));

    const reservasSheet = spreadsheet.getSheetByName(CONFIG.ABA_RESERVAS);
    if (!reservasSheet) throw new Error(`A aba '${CONFIG.ABA_RESERVAS}' não foi encontrada.`);
    const mapaReservas = new Map();
    reservasSheet.getRange("A2:F" + reservasSheet.getLastRow()).getValues().forEach(row => {
        const reserva = String(row[0]).trim(); if (!reserva) return;
        if (!mapaReservas.has(reserva)) mapaReservas.set(reserva, new Map());
        mapaReservas.get(reserva).set(String(row[2]).trim(), Number(row[5]) || 0);
    });
    
    mostrarFeedback("Sincronizando...", "Passo 2/5: Buscando todos os itens 'Entregues' do Supabase...");
    let todosOsDadosSupabase = [], pagina = 0, continuarBuscando = true;
    while (continuarBuscando) {
      const offset = pagina * CONFIG.TAMANHO_PAGINA;
      const apiUrl = `${CONFIG.SUPABASE_URL}/rest/v1/${CONFIG.NOME_DA_VIEW}?select=requisicaoid,codigo,categoria,projeto,prefixo,reserva,criadopor,matriculasolicitante,solicitante,datasolicitacao,qtdsolicitada,qtdentregue,descricao&status=eq.Entregue&qtdentregue=gt.0&limit=${CONFIG.TAMANHO_PAGINA}&offset=${offset}`;
      const response = UrlFetchApp.fetch(apiUrl, {'method':'get', 'headers':{'apikey':CONFIG.SUPABASE_KEY, 'Authorization':`Bearer ${CONFIG.SUPABASE_KEY}`}, 'muteHttpExceptions':true});
      const responseCode = response.getResponseCode();
      if (responseCode !== 200) throw new Error(`Erro na API: ${response.getContentText()}`);
      const dadosDaPagina = JSON.parse(response.getContentText());
      if (dadosDaPagina.length > 0) todosOsDadosSupabase = todosOsDadosSupabase.concat(dadosDaPagina);
      if (dadosDaPagina.length < CONFIG.TAMANHO_PAGINA) continuarBuscando = false; else pagina++;
    }
    
    const mapaSupabase = new Map(todosOsDadosSupabase.map(item => [`${item.requisicaoid}-${String(item.codigo).trim()}`, item]));
    
    mostrarFeedback("Sincronizando...", "Passo 3/5: Reconciliando dados da planilha...");
    const logDeAlteracoes = [];
    let itensAtualizados = 0, itensRemovidos = 0;
    const chavesParaManter = new Set();
    const abasDeTrabalho = [CONFIG.ABA_REQUISICOES, CONFIG.ABA_COMERCIAL];

    for (const nomeAba of abasDeTrabalho) {
        const sheet = spreadsheet.getSheetByName(nomeAba);
        if (!sheet || sheet.getLastRow() < 2) continue;
        
        const range = sheet.getRange(2, 1, sheet.getLastRow() - 1, 21);
        const data = range.getValues();
        const linhasParaRemover = [];
        
        data.forEach((linha, index) => {
            const chavePlanilha = `${linha[0]}-${String(linha[11]).trim()}`;
            const dadosSupabase = mapaSupabase.get(chavePlanilha);

            if (dadosSupabase) {
                chavesParaManter.add(chavePlanilha);
                const mudancas = [];
                // Compara e atualiza campos...
                if (Number(linha[14]) != Number(dadosSupabase.qtdsolicitada)) { mudancas.push(`QtdSol: ${linha[14]}->${dadosSupabase.qtdsolicitada}`); linha[14] = dadosSupabase.qtdsolicitada; }
                if (Number(linha[15]) != Number(dadosSupabase.qtdentregue)) { mudancas.push(`QtdEnt: ${linha[15]}->${dadosSupabase.qtdentregue}`); linha[15] = dadosSupabase.qtdentregue; }
                if (String(linha[12]) !== String(dadosSupabase.descricao)) { mudancas.push(`Descrição`); linha[12] = dadosSupabase.descricao; }
                
                if (mudancas.length > 0) {
                    itensAtualizados++;
                    // IMPORTANTE: Apenas o alerta é recalculado. As colunas de entrada manual
                    // (Qtd. Baixada, Situação, Ação/Motivo) são preservadas e não são
                    // sobrescritas durante a sincronização.
                    linha[16] = gerarAlertas(String(linha[11]), Number(linha[15]), Number(linha[18] || 0), String(linha[4]), mapaEstoque, mapaReservas);
                    if (String(linha[19]).includes("PARCIAL")) logDeAlteracoes.push(`ID ${linha[0]}: ${mudancas.join(', ')}`);
                }
            } else {
                linhasParaRemover.push(index + 2);
            }
        });

        if (data.length > 0) range.setValues(data);
        for (let i = linhasParaRemover.length - 1; i >= 0; i--) { sheet.deleteRow(linhasParaRemover[i]); itensRemovidos++; }
    }
    
    mostrarFeedback("Sincronizando...", "Passo 4/5: Adicionando novos registros...");
    const dadosParaRequisicoes = [], dadosParaComercial = [];
    const hoje = new Date();

    for (const [chave, linha] of mapaSupabase.entries()) {
        if (!chavesParaManter.has(chave)) {
            const codigoMaterial = String(linha.codigo).trim();
            const alertaFinal = gerarAlertas(codigoMaterial, Number(linha.qtdentregue), 0, String(linha.reserva || '').trim(), mapaEstoque, mapaReservas);
            const infoEstoque = mapaEstoque.get(codigoMaterial);
            let descricaoFinal = String(linha.descricao || '').trim();
            if (!descricaoFinal && infoEstoque && infoEstoque.descricao) descricaoFinal = infoEstoque.descricao;
            
            const linhaProcessada = [linha.requisicaoid, linha.categoria || "", linha.projeto || "", linha.prefixo || "", linha.reserva || "", linha.criadopor || "", linha.matriculasolicitante || "", linha.solicitante || "", linha.datasolicitacao ? Utilities.formatDate(new Date(linha.datasolicitacao), fusoHorario, 'dd/MM/yyyy') : "", Utilities.formatDate(hoje, fusoHorario, 'dd/MM/yyyy HH:mm:ss'), "", codigoMaterial, descricaoFinal, infoEstoque ? infoEstoque.und : "", linha.qtdsolicitada || "", Number(linha.qtdentregue), alertaFinal, "", "", CONFIG.SITUACAO_PADRAO, ""];
            
            if (String(linha.categoria || '').trim().toUpperCase() === 'COMERCIAL') dadosParaComercial.push(linhaProcessada);
            else dadosParaRequisicoes.push(linhaProcessada);
        }
    }

    mostrarFeedback("Sincronizando...", "Passo 5/5: Finalizando...");
    if (dadosParaRequisicoes.length > 0) {
      const sheet = spreadsheet.getSheetByName(CONFIG.ABA_REQUISICOES);
      sheet.getRange(sheet.getLastRow() + 1, 1, dadosParaRequisicoes.length, dadosParaRequisicoes[0].length).setValues(dadosParaRequisicoes);
    }
    if (dadosParaComercial.length > 0) {
      const sheet = spreadsheet.getSheetByName(CONFIG.ABA_COMERCIAL);
      sheet.getRange(sheet.getLastRow() + 1, 1, dadosParaComercial.length, dadosParaComercial[0].length).setValues(dadosParaComercial);
    }
    
    let mensagemFinal = `Sincronização Concluída!\n\n- ${dadosParaRequisicoes.length + dadosParaComercial.length} novo(s) adicionados.\n- ${itensRemovidos} obsoleto(s) removidos.\n- ${itensAtualizados} existente(s) atualizados.`;
    if (logDeAlteracoes.length > 0) mensagemFinal += "\n\n⚠️ LOG DE ALTERAÇÕES IMPORTANTES:\n" + logDeAlteracoes.join("\n");
    SpreadsheetApp.getUi().alert(mensagemFinal);

  } catch (error) {
    Logger.log(`!!! ERRO EM '${NOME_FUNCAO}': ${error.stack} !!!`);
    notificarAdminSobreErro(NOME_FUNCAO, error);
    SpreadsheetApp.getUi().alert("Ocorreu um Erro", `Detalhes: ${error.toString()}`, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}


// =================================================================================
// FUNÇÃO 2: PROCESSAMENTO DE RELATÓRIOS DO GMAIL
// =================================================================================

function processarEmailDeRelatorios() {
  const NOME_FUNCAO = "processarEmailDeRelatorios";
  try {
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    Logger.log(`--- INÍCIO DA ${NOME_FUNCAO} ---`);
    mostrarFeedback("Processando E-mail...", "Passo 1/5: Criando 'memória' de descrições...");
    
    const mapaDescricoes = criarMapaDeDescricoesConhecidas(spreadsheet);

    mostrarFeedback("Processando E-mail...", "Passo 2/5: Procurando e-mail com relatórios...");
    const query = `is:unread from:${CONFIG.EMAIL_REMETENTE} ${CONFIG.ASSUNTO_PALAVRAS_CHAVE.map(p => `subject:${p}`).join(' ')}`;
    const threads = GmailApp.search(query, 0, 1);
    if (threads.length === 0) {
      SpreadsheetApp.getUi().alert("Nenhum e-mail novo com os relatórios foi encontrado.");
      return;
    }

    const message = threads[0].getMessages()[0];
    const attachments = message.getAttachments();
    let mb52 = null, mb25 = null;
    attachments.forEach(anexo => {
      if (anexo.getName().includes("MB 52")) mb52 = anexo;
      else if (anexo.getName().includes("MB 25")) mb25 = anexo;
    });
    if (!mb52 || !mb25) throw new Error("Não foi possível encontrar os anexos (MB 52 e MB 25) no e-mail.");
    
    mostrarFeedback("Processando E-mail...", "Passo 3/5: Atualizando aba de Estoque...");
    const dadosEstoque = extrairDadosXLSX(mb52, (linha) => mapearLinhaEstoque(linha, mapaDescricoes));
    atualizarAba(spreadsheet, CONFIG.ABA_ESTOQUE, dadosEstoque, ["Código", "Descrição", "Und. Medida", "Saldo"]);
    
    mostrarFeedback("Processando E-mail...", "Passo 4/5: Atualizando aba de Reservas...");
    const dadosReservas = extrairDadosXLSX(mb25, mapearLinhaReservas);
    atualizarAba(spreadsheet, CONFIG.ABA_RESERVAS, dadosReservas, ["Reserva", "Projeto", "CódigoMaterial", "QtdPlaneada", "QtdConsumida", "QtdRestante"]);

    mostrarFeedback("Processando E-mail...", "Passo 5/5: Revalidando alertas de pendências...");
    revalidarPendencias(false);

    message.markRead();
    SpreadsheetApp.getUi().alert("Sucesso!", "As abas foram atualizadas e os alertas de pendências recalculados com sucesso.", SpreadsheetApp.getUi().ButtonSet.OK);

  } catch (error) {
    Logger.log(`!!! ERRO EM '${NOME_FUNCAO}': ${error.stack} !!!`);
    notificarAdminSobreErro(NOME_FUNCAO, error);
    SpreadsheetApp.getUi().alert("Ocorreu um erro ao processar o e-mail.", `O administrador foi notificado. Detalhes: ${error.toString()}`, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}


// =================================================================================
// FUNÇÃO 3: REVALIDAÇÃO DE ALERTAS
// =================================================================================

function revalidarPendencias(mostrarAlerta = true) {
  const NOME_FUNCAO = "revalidarPendencias";
  const ui = SpreadsheetApp.getUi();
  try {
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    Logger.log(`--- INÍCIO DA ${NOME_FUNCAO} ---`);
    if(mostrarAlerta) mostrarFeedback("Revalidando...", "Passo 1/2: Lendo dados de Estoque e Reservas...");

    const mapaEstoque = new Map(spreadsheet.getSheetByName(CONFIG.ABA_ESTOQUE).getDataRange().getValues().map(r => [String(r[0]).trim(), { und: r[2], saldo: Number(r[3]) || 0 }]));
    const mapaReservas = new Map();
    spreadsheet.getSheetByName(CONFIG.ABA_RESERVAS).getDataRange().getValues().forEach(r => {
        const reserva = String(r[0]).trim(); if (!reserva) return;
        if (!mapaReservas.has(reserva)) mapaReservas.set(reserva, new Map());
        mapaReservas.get(reserva).set(String(r[2]).trim(), Number(r[5]) || 0);
    });
    
    if(mostrarAlerta) mostrarFeedback("Revalidando...", "Passo 2/2: Verificando pendências e atualizando alertas...");
    let alertasAtualizados = 0;
    [CONFIG.ABA_REQUISICOES, CONFIG.ABA_COMERCIAL].forEach(nomeAba => {
        const sheet = spreadsheet.getSheetByName(nomeAba);
        if (!sheet || sheet.getLastRow() < 2) return;
        const dataRange = sheet.getRange("A2:T" + sheet.getLastRow());
        const data = dataRange.getValues();
        const novosAlertas = data.map(linha => {
            const situacao = String(linha[19] || '').toUpperCase();
            if (situacao.includes("PENDENTE") || situacao.includes("PARCIAL")) {
                const antigoAlerta = String(linha[16]);
                const qtdBaixada = Number(linha[18] || 0);
                const novoAlerta = gerarAlertas(String(linha[11]), Number(linha[15]), qtdBaixada, String(linha[4]), mapaEstoque, mapaReservas);
                if (novoAlerta !== antigoAlerta) alertasAtualizados++;
                return [novoAlerta];
            }
            return [linha[16]];
        });
        if(novosAlertas.length > 0) sheet.getRange(2, 17, novosAlertas.length, 1).setValues(novosAlertas);
    });
    
    if (mostrarAlerta) ui.alert("Revalidação Concluída", `${alertasAtualizados} alerta(s) foram atualizados com base nos dados mais recentes.`, ui.ButtonSet.OK);
  } catch (error) {
    Logger.log(`!!! ERRO EM '${NOME_FUNCAO}': ${error.stack} !!!`);
    if(mostrarAlerta) {
        notificarAdminSobreErro(NOME_FUNCAO, error);
        ui.alert("Ocorreu um erro ao revalidar os alertas.", `O administrador foi notificado. Detalhes: ${error.toString()}`, ui.ButtonSet.OK);
    }
  }
}


// =================================================================================
// FUNÇÃO 4: RELATÓRIO DE PENDÊNCIAS POR E-MAIL
// =================================================================================

function enviarRelatorioPendencias() {
  const NOME_FUNCAO = "enviarRelatorioPendencias";
  try {
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    Logger.log(`--- INÍCIO DA ${NOME_FUNCAO} ---`);
    mostrarFeedback("Gerando Relatório...", "Analisando pendências...");
    
    const projetosPendentes = {};
    let totalPendencias = 0;
    [CONFIG.ABA_REQUISICOES, CONFIG.ABA_COMERCIAL].forEach(nomeAba => {
      const sheet = spreadsheet.getSheetByName(nomeAba);
      if (!sheet || sheet.getLastRow() < 2) return;
      const data = sheet.getDataRange().getValues();
      data.shift();
      for (const linha of data) {
        const situacao = String(linha[19] || '').toUpperCase();
        if (situacao.includes("PENDENTE") || situacao.includes("PARCIAL")) {
          totalPendencias++;
          const projeto = String(linha[2] || 'Sem Projeto');
          if (!projetosPendentes[projeto]) projetosPendentes[projeto] = { total: 0, sharepoint: 0 };
          projetosPendentes[projeto].total++;
          if (String(linha[16] || '').includes('[SHAREPOINT]')) projetosPendentes[projeto].sharepoint++;
        }
      }
    });

    if (totalPendencias === 0) {
      SpreadsheetApp.getUi().alert("Nenhuma pendência encontrada para relatar. Tudo em dia!");
      return;
    }

    let listaProjetosHtml = "";
    Object.keys(projetosPendentes).sort().forEach(projeto => {
      const dados = projetosPendentes[projeto];
      const detalhe = dados.sharepoint > 0 ? ` (incluindo ${dados.sharepoint} com ação de SharePoint)` : "";
      listaProjetosHtml += `<li><b>${projeto}:</b> ${dados.total} item(ns) pendente(s)${detalhe}</li>`;
    });

    const corpoEmail = `<html><body style="font-family: Arial, sans-serif; color: #333;"><h2 style="color: #c0392b;">Alerta: Alto Volume de Pendências de Baixa</h2><p>Olá, foi identificado um total de <strong>${totalPendencias} itens</strong> com pendência de baixa nos seguintes projetos:</p><ul style="line-height: 1.6;">${listaProjetosHtml}</ul><p>Acesse a planilha de controlo para tomar as ações necessárias.</p><a href="${spreadsheet.getUrl()}" style="display: inline-block; padding: 12px 20px; background-color: #3498db; color: #ffffff; text-decoration: none; border-radius: 5px; font-size: 16px;">Aceder à Planilha</a><p style="font-size: 12px; color: #7f8c8d; margin-top: 20px;"><em>E-mail automático.</em></p></body></html>`;
    const assunto = `[ALERTA] ${totalPendencias} Itens com Pendência de Baixa`;
    
    if (!CONFIG.DESTINATARIOS_RELATORIO || CONFIG.DESTINATARIOS_RELATORIO.includes("exemplo.com")) {
        throw new Error("A lista de destinatários do relatório não foi configurada em CONFIG.");
    }

    GmailApp.sendEmail(CONFIG.DESTINATARIOS_RELATORIO, assunto, "", { htmlBody: corpoEmail });
    SpreadsheetApp.getUi().alert("Relatório de Pendências", `O e-mail de alerta com ${totalPendencias} pendências foi enviado com sucesso.`, SpreadsheetApp.getUi().ButtonSet.OK);

  } catch (error) {
    Logger.log(`!!! ERRO EM '${NOME_FUNCAO}': ${error.stack} !!!`);
    notificarAdminSobreErro(NOME_FUNCAO, error);
    SpreadsheetApp.getUi().alert(`Ocorreu um erro ao gerar o relatório.`, `O administrador foi notificado. Detalhes: ${error.toString()}`, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}


// =================================================================================
// FUNÇÕES AUXILIARES E DE GATILHOS
// =================================================================================

/**
 * Cria um mapa de descrições conhecidas a partir de todas as abas.
 * @param {Spreadsheet} spreadsheet O objeto da planilha ativa.
 * @returns {Map} Um mapa onde a chave é o código do material e o valor é a descrição.
 */
function criarMapaDeDescricoesConhecidas(spreadsheet) {
    const mapaDescricoes = new Map();
    const abasParaLer = [CONFIG.ABA_REQUISICOES, CONFIG.ABA_COMERCIAL, CONFIG.ABA_ESTOQUE];

    abasParaLer.forEach(nomeAba => {
        const sheet = spreadsheet.getSheetByName(nomeAba);
        if (sheet && sheet.getLastRow() > 1) {
            let data, colCodigo, colDesc;
            if (nomeAba === CONFIG.ABA_ESTOQUE) {
                data = sheet.getRange("A2:B" + sheet.getLastRow()).getValues();
                colCodigo = 0; colDesc = 1;
            } else {
                data = sheet.getRange("L2:M" + sheet.getLastRow()).getValues();
                colCodigo = 0; colDesc = 1;
            }
            data.forEach(row => {
                const codigo = String(row[colCodigo] || '').trim();
                const descricao = String(row[colDesc] || '').trim();
                if (codigo && descricao && !mapaDescricoes.has(codigo)) {
                    mapaDescricoes.set(codigo, descricao);
                }
            });
        }
    });
    Logger.log(`Criado mapa com ${mapaDescricoes.size} descrições conhecidas.`);
    return mapaDescricoes;
}

/**
 * Função auxiliar para extrair dados de um anexo .xlsx.
 */
function extrairDadosXLSX(anexo, funcaoMapeamento) {
  let tempFileId = null;
  try {
    // Tenta criar um arquivo temporário no Drive a partir do anexo.
    // Isso requer que a API Avançada do Drive esteja habilitada no projeto.
    const tempFile = Drive.Files.create({ title: `temp_excel_import_${new Date().getTime()}`, mimeType: MimeType.GOOGLE_SHEETS }, anexo.copyBlob());
    tempFileId = tempFile.id;
    
    if (!tempFileId) {
      throw new Error("A criação do arquivo temporário no Google Drive falhou. Verifique as permissões.");
    }

    // Pausa para dar tempo ao Google de processar e converter o arquivo.
    Utilities.sleep(5000); // Aumentado para 5s para maior segurança

    const sheet = SpreadsheetApp.openById(tempFileId).getSheets()[0];
    const data = sheet.getDataRange().getValues();
    data.shift(); // Remove o cabeçalho
    return data.map(linha => (linha.length < 5 || !linha[0]) ? null : funcaoMapeamento(linha)).filter(Boolean);
  
  } catch (e) {
    Logger.log(`Falha crítica ao processar o arquivo XLSX: ${e.stack}`);
    // Verifica se o erro é sobre a Drive API não estar habilitada.
    if (e.message.includes("Drive.Files.create is not a function")) {
      throw new Error("A API Avançada do Google Drive não está ativada. Por favor, ative-a no Editor de Scripts em 'Serviços +' e tente novamente.");
    }
    throw new Error(`Falha ao ler o arquivo Excel. Detalhes: ${e.message}`);
  } finally {
    // Garante que o arquivo temporário seja sempre removido.
    if (tempFileId) {
      try {
        Drive.Files.remove(tempFileId);
      } catch (err) {
        Logger.log(`Não foi possível remover o arquivo temporário ${tempFileId}. Erro: ${err.stack}`);
      }
    }
  }
}

/**
 * Mapeia as colunas do relatório de Estoque e preenche descrições vazias.
 */
function mapearLinhaEstoque(linha, mapaDescricoes) {
  const codigo = String(linha[0] || '').trim();
  let descricao = String(linha[1] || '').trim();

  if (!descricao && mapaDescricoes.has(codigo)) {
      descricao = mapaDescricoes.get(codigo);
  }
  return [ codigo, descricao, String(linha[2] || '').trim(), String(linha[7] || '').trim() ];
}

/**
 * Mapeia as colunas do relatório de Reservas (MB 25).
 */
function mapearLinhaReservas(linha) {
  return [ String(linha[0] || '').trim(), String(linha[4] || '').trim(), String(linha[7] || '').trim(), String(linha[10] || '').trim(), String(linha[11] || '').trim(), String(linha[12] || '').trim() ];
}

/**
 * Limpa e atualiza uma aba inteira com novos dados e cabeçalhos.
 */
function atualizarAba(spreadsheet, nomeAba, dados, cabecalhos) {
  let sheet = spreadsheet.getSheetByName(nomeAba);
  if (!sheet) sheet = spreadsheet.insertSheet(nomeAba);
  sheet.clear();
  sheet.getRange(1, 1, 1, cabecalhos.length).setValues([cabecalhos]).setFontWeight('bold');
  if (dados.length > 0) sheet.getRange(2, 1, dados.length, dados[0].length).setValues(dados);
  sheet.autoResizeColumns(1, cabecalhos.length);
}

/**
 * Gatilho principal que reage a edições na planilha.
 */
function handleEdit(e) {
  const lock = LockService.getScriptLock();
  try {
    lock.waitLock(30000);

    const { range, value, user } = e;
    const sheet = range.getSheet();
    const col = range.getColumn(), row = range.getRow();
    // CORREÇÃO FINAL: O gatilho agora monitora a coluna T (Qtd. Baixada) e U (Ação).
    if (row === 1 || (col !== 20 && col !== 21)) return;

    const sheetName = sheet.getName();
    if (col === 21 && value && value.toLowerCase() === 'sharepoint') {
      handleSharePointRequest(sheet, row, "America/Sao_Paulo", user.getEmail());
    } else if (col === 20 && (sheetName === CONFIG.ABA_REQUISICOES || sheetName === CONFIG.ABA_COMERCIAL)) {
      handleBaixaStatusUpdate(sheet, row, value);
    }
  } catch (error) {
    Logger.log(`Erro de concorrência ou timeout no handleEdit: ${error.stack}`);
  } finally {
    lock.releaseLock();
  }
}

/**
 * Lida com a automação de envio de solicitações para a planilha do SharePoint.
 */
function handleSharePointRequest(sheet, row, fusoHorario, userEmail) {
  try {
    const sourceData = sheet.getRange(row, 1, 1, 19).getValues()[0];
    
    const projeto = sourceData[2];
    const reserva = sourceData[4];
    const codigo = sourceData[11];
    const material = sourceData[12];
    const undMedida = sourceData[13];
    const qtdSolicitada = sourceData[14];
    const qtdEntregue = Number(sourceData[15] || 0);
    const alerta = String(sourceData[16] || '');
    const qtdBaixada = Number(sourceData[18] || 0);
    
    const targetSpreadsheet = SpreadsheetApp.openById(CONFIG.ID_PLANILHA_SHAREPOINT);
    const chaveUnica = `${reserva}-${codigo}`;
    for (const nomeAba of ["Solicitações", "Resolvidas"]) {
      const targetSheet = targetSpreadsheet.getSheetByName(nomeAba);
      if (targetSheet && targetSheet.getLastRow() > 1) {
        const data = targetSheet.getRange("E2:F" + targetSheet.getLastRow()).getValues();
        for (const linha of data) if (`${linha[0]}-${linha[1]}` === chaveUnica) {
          SpreadsheetApp.getUi().alert("⚠️ Solicitação Duplicada", `Este item já existe na planilha de controle na aba '${nomeAba}'.`, SpreadsheetApp.getUi().ButtonSet.OK);
          return;
        }
      }
    }
    
    let quantNecessaria = 0;
    const match = alerta.match(/Subir (\d+(\.\d+)?)/);
    
    if (match) {
        quantNecessaria = Number(match[1]);
    } else {
        quantNecessaria = qtdEntregue - qtdBaixada;
    }

    if (quantNecessaria < 0) quantNecessaria = 0;

    const solicitacoesSheet = targetSpreadsheet.getSheetByName("Solicitações");
    if (!solicitacoesSheet) throw new Error("Aba 'Solicitações' não encontrada na planilha de destino.");

    const newRow = ["", Utilities.formatDate(new Date(), fusoHorario, 'dd/MM/yyyy'), userEmail, projeto, reserva, codigo, material, undMedida, qtdSolicitada, quantNecessaria, "pendente"];
    solicitacoesSheet.appendRow(newRow);
    
  } catch (error) {
    Logger.log(`ERRO no gatilho SharePoint: ${error.stack}`);
    SpreadsheetApp.getUi().alert(`Ocorreu um erro ao enviar para o SharePoint: ${error.toString()}`, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * Nova função helper para recalcular o alerta de uma linha específica de forma otimizada.
 */
function revalidarAlertaLinha(sheet, row) {
    const NOME_FUNCAO = "revalidarAlertaLinha";
    try {
        // Esta função é otimizada para não recarregar todos os dados de estoque e reservas a cada edição.
        // No entanto, para garantir a precisão do alerta no momento da edição, a recarga é mantida.
        // Para otimizações futuras, um cache com tempo de expiração poderia ser implementado.
        const spreadsheet = sheet.getParent();
        const mapaEstoque = new Map(spreadsheet.getSheetByName(CONFIG.ABA_ESTOQUE).getDataRange().getValues().slice(1).map(r => [String(r[0]).trim(), { und: r[2], saldo: Number(r[3]) || 0 }]));
        const mapaReservas = new Map();
        spreadsheet.getSheetByName(CONFIG.ABA_RESERVAS).getDataRange().getValues().slice(1).forEach(r => {
            const reserva = String(r[0]).trim(); if (!reserva) return;
            if (!mapaReservas.has(reserva)) mapaReservas.set(reserva, new Map());
            mapaReservas.get(reserva).set(String(r[2]).trim(), Number(r[5]) || 0);
        });

        const linhaData = sheet.getRange(row, 1, 1, 19).getValues()[0];
        const qtdBaixada = Number(linhaData[18] || 0);
        const novoAlerta = gerarAlertas(String(linhaData[11]), Number(linhaData[15]), qtdBaixada, String(linhaData[4]), mapaEstoque, mapaReservas);
        sheet.getRange(row, 17).setValue(novoAlerta);
    } catch(e) {
        Logger.log(`ERRO em ${NOME_FUNCAO}: ${e.stack}`);
        // Não notifica o usuário para não ser intrusivo a cada pequena falha de revalidação.
    }
}

/**
 * Lida com a atualização do status da baixa e recalcula o alerta da linha editada.
 */
function handleBaixaStatusUpdate(sheet, row, qtdBaixadaValue) {
  try {
    let qtdBaixada;
    if (typeof qtdBaixadaValue === 'number') {
        qtdBaixada = qtdBaixadaValue;
    } else {
        qtdBaixada = (qtdBaixadaValue === '' || qtdBaixadaValue === null) ? 0 : Number(String(qtdBaixadaValue).replace(',', '.'));
    }
    if (isNaN(qtdBaixada)) return;

    const rowData = sheet.getRange(row, 1, 1, sheet.getLastColumn()).getValues()[0];
    const qtdEntregue = Number(rowData[15]);
    // CORREÇÃO FINAL: A célula de Situação é a coluna S (19).
    const situacaoCell = sheet.getRange(row, 19);

    // Remove a validação de dados da célula de situação para evitar erros.
    situacaoCell.clearDataValidations();
    SpreadsheetApp.flush(); // Força a aplicação da remoção da validação antes de continuar.

    // Condição ajustada: arquiva se a quantidade baixada for igual à entregue.
    // Isso agora funciona corretamente para casos onde a quantidade é 0.
    if (Math.abs(qtdBaixada - qtdEntregue) < 0.001) {
      // ALTERAÇÃO: Em vez de mover a linha para a aba "Arquivo", apenas atualiza o status na própria linha.
      situacaoCell.setValue("BAIXADO");      // Coluna S (Situação)
      sheet.getRange(row, 17).setValue(""); // Coluna Q (Alerta)
      sheet.getRange(row, 21).setValue(""); // Coluna U (Ação)
      
      // Se havia uma pendência de SharePoint, resolve-a mesmo sem arquivar.
      if (String(rowData[16]).includes('[SHAREPOINT]')) {
        resolverSolicitacaoSharePoint(rowData);
      }
    } else {
      if (qtdBaixada > 0 && qtdBaixada < qtdEntregue) {
        situacaoCell.setValue(`BAIXA PARCIAL (${String(qtdBaixada).replace('.',',')}/${qtdEntregue})`);
      } else if (qtdBaixada > qtdEntregue) {
        situacaoCell.setValue(`ERRO: BAIXA (${String(qtdBaixada).replace('.',',')}) > ENTREGUE (${qtdEntregue})`);
      } else {
        situacaoCell.setValue(CONFIG.SITUACAO_PADRAO);
      }
      revalidarAlertaLinha(sheet, row);
    }
  } catch (error) {
    Logger.log(`ERRO em handleBaixaStatusUpdate: ${error.stack}`);
    SpreadsheetApp.getUi().alert(`Erro ao atualizar baixa: ${error.toString()}`, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * Move uma solicitação da aba "Solicitações" para "Resolvidas" na planilha do SharePoint.
 */
function resolverSolicitacaoSharePoint(rowData) {
    const reserva = String(rowData[4]);
    const codigo = String(rowData[11]);
    if (!reserva || !codigo) return;
    try {
        const targetSpreadsheet = SpreadsheetApp.openById(CONFIG.ID_PLANILHA_SHAREPOINT);
        const solicitacoesSheet = targetSpreadsheet.getSheetByName("Solicitações");
        const resolvidasSheet = targetSpreadsheet.getSheetByName("Resolvidas");
        if (!solicitacoesSheet || !resolvidasSheet || solicitacoesSheet.getLastRow() < 2) return;
        const data = solicitacoesSheet.getDataRange().getValues();
        for (let i = data.length - 1; i > 0; i--) { 
            const linhaAtual = data[i];
            if (String(linhaAtual[4]) === reserva && String(linhaAtual[5]) === codigo) {
                resolvidasSheet.appendRow(linhaAtual);
                solicitacoesSheet.deleteRow(i + 1);
                Logger.log(`Solicitação para Reserva ${reserva}, Código ${codigo} movida para Resolvidas.`);
                return;
            }
        }
    } catch (error) {
        Logger.log(`ERRO ao resolver solicitação no SharePoint: ${error.stack}`);
    }
}


// =================================================================================
// FUNÇÕES DE MANUTENÇÃO
// =================================================================================

/**
 * Revalida a SITUAÇÃO de todos os itens nas abas de trabalho.
 * Compara a Qtd. Entregue com a Qtd. Baixada e atualiza o status para BAIXADO,
 * PENDENTE, PARCIAL ou ERRO, conforme a lógica.
 */
function revalidarTodasAsSituacoes() {
  const NOME_FUNCAO = "revalidarTodasAsSituacoes";
  const ui = SpreadsheetApp.getUi();
  try {
    const resposta = ui.alert(
      "Confirmação",
      "Esta ação irá percorrer TODAS as linhas das abas 'Requisições' e 'Comerciais' para corrigir o status de 'Situação' com base nas quantidades. Isso pode levar alguns instantes.\n\nDeseja continuar?",
      ui.ButtonSet.YES_NO
    );
    if (resposta !== ui.Button.YES) {
      ui.alert("Ação cancelada pelo usuário.");
      return;
    }

    mostrarFeedback("Revalidando Situações...", "Analisando abas de trabalho...");
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    let situacoesCorrigidas = 0;

    [CONFIG.ABA_REQUISICOES, CONFIG.ABA_COMERCIAL].forEach(nomeAba => {
      const sheet = spreadsheet.getSheetByName(nomeAba);
      if (!sheet || sheet.getLastRow() < 2) return;

      const range = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn());
      const data = range.getValues();

      const novasSituacoes = [];
      const novosAlertas = [];
      const novasAcoes = [];

      data.forEach(linha => {
        // CORREÇÃO FINAL: As colunas foram ajustadas. Qtd. Baixada é T (19), Situação é S (18).
        const qtdEntregue = Number(linha[15]); // Coluna P
        const qtdBaixada = (linha[19] === '' || linha[19] === null) ? 0 : Number(String(linha[19]).replace(',', '.')); // Coluna T
        const situacaoAtual = String(linha[18]); // Coluna S
        let novaSituacao = situacaoAtual;
        let alertaAtual = linha[16];
        let acaoAtual = linha[20];

        if (Math.abs(qtdBaixada - qtdEntregue) < 0.001) {
          novaSituacao = "BAIXADO";
          alertaAtual = ""; // Limpa Alerta
          acaoAtual = "";   // Limpa Ação
        } else {
          if (qtdBaixada > 0 && qtdBaixada < qtdEntregue) {
            novaSituacao = `BAIXA PARCIAL (${String(qtdBaixada).replace('.',',')}/${qtdEntregue})`;
          } else if (qtdBaixada > qtdEntregue) {
            novaSituacao = `ERRO: BAIXA (${String(qtdBaixada).replace('.',',')}) > ENTREGUE (${qtdEntregue})`;
          } else {
            novaSituacao = CONFIG.SITUACAO_PADRAO;
          }
        }
        
        if (novaSituacao !== situacaoAtual) {
          situacoesCorrigidas++;
        }
        novasSituacoes.push([novaSituacao]);
        novosAlertas.push([alertaAtual]);
        novasAcoes.push([acaoAtual]);
      });

      // ATUALIZAÇÃO FINAL: A atualização é feita célula por célula para garantir a robustez.
      if (novasSituacoes.length > 0) {
        for (let i = 0; i < novasSituacoes.length; i++) {
          const currentRow = i + 2; // As linhas de dados começam na linha 2
          
          // CORREÇÃO FINAL: Atualiza a Situação na coluna S (19).
          const situacaoCell = sheet.getRange(currentRow, 19);
          situacaoCell.clearDataValidations();
          SpreadsheetApp.flush(); // Força a aplicação da remoção da validação.
          situacaoCell.setValue(novasSituacoes[i][0]);

          // Atualiza o Alerta (Coluna Q)
          sheet.getRange(currentRow, 17).setValue(novosAlertas[i][0]);

          // Atualiza a Ação (Coluna U)
          sheet.getRange(currentRow, 21).setValue(novasAcoes[i][0]);
        }
      }
    });

    ui.alert("Revalidação Concluída", `${situacoesCorrigidas} situação(ões) foram corrigidas com sucesso.`, ui.ButtonSet.OK);

  } catch (error) {
    Logger.log(`!!! ERRO EM '${NOME_FUNCAO}': ${error.stack} !!!`);
    notificarAdminSobreErro(NOME_FUNCAO, error);
    ui.alert(`Ocorreu um erro durante a revalidação das situações.`, `O administrador foi notificado. Detalhes: ${error.toString()}`, ui.ButtonSet.OK);
  }
}


// =================================================================================
// FUNÇÃO DE MENU E AUTORIZAÇÃO
// =================================================================================

/**
 * Adiciona o menu personalizado '⚙️ Automações' na interface do Google Planilhas.
 */
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('⚙️ Automações')
    .addItem('1. Sincronizar (Adicionar, Atualizar, Remover)', 'sincronizarDadosSupabase')
    .addItem('2. Processar Relatórios do E-mail', 'processarEmailDeRelatorios')
    .addSeparator()
    .addItem('3. Enviar Relatório de Pendências', 'enviarRelatorioPendencias')
    .addItem('4. Revalidar Todos os Alertas', 'revalidarPendencias')
    .addSeparator()
    .addItem('5. Revalidar Todas as Situações', 'revalidarTodasAsSituacoes')
    .addToUi();
}

/**
 * Esta função serve apenas para forçar a janela de autorização do Google.
 * Execute-a manualmente UMA VEZ no editor de scripts para conceder as permissões necessárias.
 */
function forcarAutorizacao() {
  try {
    Logger.log("Forçando autorização para os serviços necessários...");
    SpreadsheetApp.openById(CONFIG.ID_PLANILHA_SHAREPOINT);
    GmailApp.search("");
    DriveApp.getRootFolder();
    SpreadsheetApp.getUi().alert("Permissões concedidas!", "As permissões necessárias foram verificadas com sucesso.", SpreadsheetApp.getUi().ButtonSet.OK);
  } catch (e) {
    SpreadsheetApp.getUi().alert("Permissões necessárias", `O Google solicitará permissão para que o script funcione. Por favor, autorize. Detalhes do erro: ${e.toString()}`, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}
